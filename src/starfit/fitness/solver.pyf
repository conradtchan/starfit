!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module _solver ! in
    interface  ! in :_solver
        subroutine fitness_(f,c,obs,err,det,cov,abu,nel,ncov,nstar,nsol,ls,icdf,flags) ! in :_solver:solver.f90
            use fitting, only: fitness
            use typedef, only: real64,int64
            real(kind=real64) dimension(nsol),intent(out),depend(nsol) :: f
            real(kind=real64) dimension(nsol,nstar),intent(in,out) :: c
            real(kind=real64) dimension(nel),intent(in) :: obs
            real(kind=real64) dimension(nel),intent(in),depend(nel) :: err
            real(kind=real64) dimension(nel),intent(in),depend(nel) :: det
            real(kind=real64) dimension(nel,ncov),intent(in),depend(nel) :: cov
            real(kind=real64) dimension(nsol,nstar,nel),intent(in),depend(nel,nstar,nsol) :: abu
            integer(kind=int64), optional,intent(in),check(shape(obs, 0) == nel),depend(obs) :: nel=shape(obs, 0)
            integer(kind=int64), optional,intent(in),check(shape(cov, 1) == ncov),depend(cov) :: ncov=shape(cov, 1)
            integer(kind=int64), optional,intent(in),check(shape(c, 1) == nstar),depend(c) :: nstar=shape(c, 1)
            integer(kind=int64), optional,intent(in),check(shape(c, 0) == nsol),depend(c) :: nsol=shape(c, 0)
            integer(kind=int64) intent(in) :: ls
            integer(kind=int64) intent(in) :: icdf
            integer(kind=int64) intent(in) :: flags
        end subroutine fitness_
        subroutine fitness_m_(f,c,obs,err,det,cov,abu,nel,ncov,nstar,nsol,ls,icdf,flags) ! in :_solver:solver.f90
            use fitting, only: fitness_m
            use typedef, only: real64,int64
            real(kind=real64) dimension(nsol,nel,nel),intent(out),depend(nel,nsol) :: f
            real(kind=real64) dimension(nsol,nstar),intent(in,out) :: c
            real(kind=real64) dimension(nel),intent(in) :: obs
            real(kind=real64) dimension(nel),intent(in),depend(nel) :: err
            real(kind=real64) dimension(nel),intent(in),depend(nel) :: det
            real(kind=real64) dimension(nel,ncov),intent(in),depend(nel) :: cov
            real(kind=real64) dimension(nsol,nstar,nel),intent(in),depend(nel,nstar,nsol) :: abu
            integer(kind=int64), optional,intent(in),check(shape(obs, 0) == nel),depend(obs) :: nel=shape(obs, 0)
            integer(kind=int64), optional,intent(in),check(shape(cov, 1) == ncov),depend(cov) :: ncov=shape(cov, 1)
            integer(kind=int64), optional,intent(in),check(shape(c, 1) == nstar),depend(c) :: nstar=shape(c, 1)
            integer(kind=int64), optional,intent(in),check(shape(c, 0) == nsol),depend(c) :: nsol=shape(c, 0)
            integer(kind=int64) intent(in) :: ls
            integer(kind=int64) intent(in) :: icdf
            integer(kind=int64) intent(in) :: flags
        end subroutine fitness_m_
        subroutine get_complete_matrix_(m,obs,err,det,cov,nel,ncov,icdf) ! in :_solver:solver.f90
            use star_data, only: set_star_data,get_complete_matrix
            use typedef, only: real64,int64
            real(kind=real64) dimension(nel,nel),intent(out),depend(nel) :: m
            real(kind=real64) dimension(nel),intent(in) :: obs
            real(kind=real64) dimension(nel),intent(in),depend(nel) :: err
            real(kind=real64) dimension(nel),intent(in),depend(nel) :: det
            real(kind=real64) dimension(nel,ncov),intent(in),depend(nel) :: cov
            integer(kind=int64), optional,intent(in),check(shape(obs, 0) == nel),depend(obs) :: nel=shape(obs, 0)
            integer(kind=int64), optional,intent(in),check(shape(cov, 1) == ncov),depend(cov) :: ncov=shape(cov, 1)
            integer(kind=int64) intent(in) :: icdf
        end subroutine get_complete_matrix_
        subroutine get_complete_inverse_(m1,obs,err,det,cov,nel,ncov,icdf) ! in :_solver:solver.f90
            use star_data, only: set_star_data,get_complete_matrix
            use typedef, only: real64,int64
            real(kind=real64) dimension(nel,nel),intent(out),depend(nel) :: m1
            real(kind=real64) dimension(nel),intent(in) :: obs
            real(kind=real64) dimension(nel),intent(in),depend(nel) :: err
            real(kind=real64) dimension(nel),intent(in),depend(nel) :: det
            real(kind=real64) dimension(nel,ncov),intent(in),depend(nel) :: cov
            integer(kind=int64), optional,intent(in),check(shape(obs, 0) == nel),depend(obs) :: nel=shape(obs, 0)
            integer(kind=int64), optional,intent(in),check(shape(cov, 1) == ncov),depend(cov) :: ncov=shape(cov, 1)
            integer(kind=int64) intent(in) :: icdf
        end subroutine get_complete_inverse_
    end interface
end python module _solver

! This file was auto-generated with f2py (version:1.23.5).
! See:
! https://web.archive.org/web/20140822061353/http://cens.ioc.ee/projects/f2py2e
